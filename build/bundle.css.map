{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Guia.svelte",
    "../../List.svelte",
    "../../Map.svelte"
  ],
  "sourcesContent": [
    "<script>\n import gs2json from './utils.js';\n import List from './List.svelte';\n import { claves } from './store.js';\n import Map from './Map.svelte';\n let parsed\n\n const fetchData = (async () => {\n   const response = await fetch(`https://spreadsheets.google.com/feeds/cells/1ia-bi_1oIuVbNGtAWsQbF6jrUMp1ef7AuGhepLfTxqM/1/public/full?alt=json`);\n   const json = await response.json()\n   parsed =  await gs2json(json)\n   await claves.set(parsed)\n   return parsed\n })()\n\n</script>\n\n<style>\n\n main {\n   display: flex;\n   justify-content: space-around;\n   height: 100%;\n }\n .left {\n   width: 30%;\n   height: 100%;\n }\n .right {\n   width: 70%;\n   height: 100%;\n }\n\n</style>\n\n<main>\n  {#await fetchData}\n  <div class=\"loading\">\n    <p>carregando...</p>\n  </div>\n  {:then data}\n  <div class=\"left\">\n    <List {data} />\n  </div>\n  <div class=\"right\">\n    <Map />\n  </div>\n  {/await}\n</main>\n",
    "<script>\n import { onMount, afterUpdate } from 'svelte';\n import Clavis from './clavis.js'\n import Youtube from \"@sveltecasts/svelte-youtube\";\n const clavis = new Clavis()\n let canvas\n export let clave\n\n onMount(() => {\n   clavis.configure(canvas, clave.guia, 120)\n   clavis.draw()\n });\n\n afterUpdate(() => {\n   clavis.configure(canvas, clave.guia, 120)\n   clavis.draw()\n });\n</script>\n\n\n<div class=\"guia\">\n  <h1>{clave.nome}<small>{clave.pais}</small></h1>\n  <canvas\n    bind:this={canvas}\n    width={200}\n    height={200}\n  ></canvas>\n  {#if clave.texto}\n  <p>{clave.texto}</p>\n  {/if}\n\n  <iframe\n    width=\"560\"\n    height=\"315\"\n    src={clave.youtube.replace(\"watch?v=\",\"embed/\")}\n    frameborder=\"0\"\n  ></iframe>\n</div>\n\n<style>\n .embed-container {\n   position: relative;\n   padding-bottom: 56.25%;\n   height: 0; overflow: hidden; max-width: 100%; }\n\n .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }\n\n .guia {\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   min-height: 100vh;\n }\n h1 { text-align: center;}\n small {\n   color: #8e8e8e;\n   display: block;\n }\n canvas {\n   width: 200px;\n   height: 200px;\n }\n p {\n   padding: 0 20px;\n }\n</style>\n",
    "<script>\n export let data\n import { onMount, onDestroy } from 'svelte';\n import inView from 'in-view'\n import { activeListItem, activeMapItem } from './store.js';\n import Guia from './Guia.svelte';\n let list\n\n onMount(async () => {\n   // Set a nicer offset so it's not a hard cutoff\n   inView.offset(200);\n\n   list.addEventListener('scroll', function(e) {\n     // Active list item is top-most fully-visible item\n     const visibleListItems = Array.from(document.getElementsByClassName('item')).map(inView.is);\n     // Array.indexOf() will give us the first one in list, so the current active item\n\n     const topMostVisible = visibleListItems.indexOf(true);\n     if (topMostVisible !== $activeMapItem) {\n       activeMapItem.set(topMostVisible)\n     }\n   });\n\n });\n\n // Update list scroll position when active list item is updated via map\n const unsubscribeActiveListItem = activeListItem.subscribe(\n   newActiveListItem => {\n     if (list) {\n       list.scrollTop = document.getElementById(\n         `guia-${newActiveListItem}`\n       ).offsetTop;\n     }\n   }\n );\n\n onDestroy(unsubscribeActiveListItem);\n</script>\n\n<style>\n .guias {\n   display: flex;\n   flex-direction: column;\n   padding: 0;\n   flex-shrink: 0;\n   margin: 0;\n   overflow-y: scroll;\n   height: 100vh;\n }\n\n li {\n   list-style: none;\n   text-align: left;\n   cursor: pointer;\n   padding: 0 10px;\n   height: 40px;\n   display: flex;\n   flex-direction: column;\n   margin-bottom: 9px;\n   justify-content: center;\n }\n\n .active {\n   font-weight: bold;\n }\n</style>\n\n\n\n<div class=\"guias\" bind:this={list}>\n  {#each data as clave, index }\n  <div class=\"item\" id=\"guia-{index}\">\n    <Guia  {clave} />\n  </div>\n  {/each}\n</div>\n",
    "<style>\n div {\n   width: 100%;\n   height: 100%;\n }\n\n div:before {\n   box-shadow: 20px 0 10px -10px rgba(0, 0, 0, 0.15) inset;\n   content: '';\n   height: 100%;\n   left: 0;\n   position: absolute;\n   width: 20px;\n   z-index: 1000;\n }\n</style>\n\n<script>\n import { onMount, onDestroy } from 'svelte';\n import { mapbox, key } from './mapbox.js';\n import { claves, activeListItem, activeMapItem } from './store.js';\n import { isLatitude, isLongitude } from './utils.js';\n let container;\n let map;\n\n function generateFeature({ nome, lat, log }, index) {\n   if (isLatitude(lat) && isLongitude(log)) {\n     return {\n       type: 'Feature',\n       properties: {\n         description: nome,\n         id: index\n       },\n       geometry: {\n         type: 'Point',\n         coordinates: [log, lat]\n       }\n     };\n   } else {\n   return {}\n}\n }\n\n onMount(async () => {\n   console.log($claves.map(generateFeature))\n   map = new mapbox.Map({\n     container,\n     style: 'mapbox://styles/guerrinha/ckc70179o1sae1ip67q6upbgg',\n     center: [parseFloat($claves[0].lat), parseFloat($claves[0].log)],\n     zoom: 3\n   });\n\n   map.on('load', function() {\n     map.addLayer({\n       id: 'places',\n       type: 'symbol',\n       source: {\n         type: 'geojson',\n         data: {\n           type: 'FeatureCollection',\n           features: $claves.map(generateFeature)\n         }\n       },\n       layout: {\n         'icon-image': 'cafe-15',\n         'icon-size': 2,\n         'icon-allow-overlap': true\n       }\n     });\n   });\n\n   map.on('click', 'places', function({ features }) {\n     const match = features[0];\n     const coordinates = match.geometry.coordinates.slice();\n     if (isLatitude(coordinates[0]) && isLongitude(coordinates[1])) {\n\n       // Show popup\n       new mapbox.Popup()\n                 .setLngLat([coordinates[0], coordinates[1]])\n                 .setHTML(match.properties.description)\n                 .addTo(map);\n\n       activeListItem.set(match.properties.id);\n     }\n   });\n\n   map.on('mouseenter', 'places', function() {\n     map.getCanvas().style.cursor = 'pointer';\n   });\n\n   map.on('mouseleave', 'places', function() {\n     map.getCanvas().style.cursor = '';\n   });\n });\n\n // Update map center when active list item is updated via list\n const unsubscribeActiveMapItem = activeMapItem.subscribe(newActiveMapItem => {\n   const item = $claves[newActiveMapItem];\n   if (map && isLatitude(item.lat) && isLongitude(item.log)) {\n     map.flyTo({\n       center: [item.log, item.lat],\n       zoom: 4\n     });\n   }\n });\n\n onDestroy(unsubscribeActiveMapItem);\n</script>\n\n<div bind:this=\"{container}\"></div>\n"
  ],
  "names": [],
  "mappings": "AAmBC,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,CAC7B,MAAM,CAAE,IAAI,AACd,CAAC,AACD,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACd,CAAC,AACD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACd,CAAC;ACgBD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,EAAE,cAAC,CAAC,AAAC,UAAU,CAAE,MAAM,AAAC,CAAC,AACzB,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACf,CAAC,AACD,CAAC,cAAC,CAAC,AACD,OAAO,CAAE,CAAC,CAAC,IAAI,AACjB,CAAC;ACxBD,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,CAAC,CACd,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,KAAK,AACf,CAAC;AC/CD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,iBAAG,OAAO,AAAC,CAAC,AACV,UAAU,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CACvD,OAAO,CAAE,EAAE,CACX,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,CAAC,CACP,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,AACf,CAAC"
}